Рекомендации по кодированию для проекта "Калькулятор калорий" (Python)

Запреты:

1. Не использовать "магические числа" в коде
Плохо:

if calories > 2000:
    print("Слишком много калорий!")

Хорошо:

MAX_CALORIES = 2000
if calories > MAX_CALORIES:
    print("Слишком много калорий!")


2. Не использовать однобуквенные или непонятные названия переменных
Плохо:

x = 500
y = 100
z = x - y

Хорошо:

daily_calories = 500
burned_calories = 100
net_calories = daily_calories - burned_calories


3. Не загромождать код длинными строками (более 79 символов)
Плохо:

print("Ваш дневной лимит калорий превышен. Попробуйте уменьшить потребление еды и добавить больше активности.")

Хорошо:

print(
    "Ваш дневной лимит калорий превышен. "
    "Попробуйте уменьшить потребление еды и добавить больше активности."
)




---

Рекомендации:

1. Использовать аннотации типов
Плохо:

def calculate_bmi(weight, height):
    return weight / (height ** 2)

Хорошо:

def calculate_bmi(weight: float, height: float) -> float:
    return weight / (height ** 2)


2. Разделять код на функции и модули
Плохо:

calories = int(input("Введите количество калорий: "))
if calories > 2000:
    print("Слишком много калорий!")

Хорошо:

def check_calories(calories: int) -> None:
    if calories > 2000:
        print("Слишком много калорий!")

calories = int(input("Введите количество калорий: "))
check_calories(calories)


3. Использовать f-строки вместо + и .format()
Плохо:

print("Сегодня вы съели " + str(calories) + " калорий.")

Хорошо:

print(f"Сегодня вы съели {calories} калорий.")




---

Требования:

1. Соблюдать PEP8

Использовать black или flake8 для автоформатирования.



2. Документировать функции и модули
Пример:

def calculate_calories(proteins: float, fats: float, carbs: float) -> int:
    """
    Рассчитывает количество калорий по БЖУ.

    :param proteins: количество белков (г)
    :param fats: количество жиров (г)
    :param carbs: количество углеводов (г)
    :return: количество калорий
    """
    return int(proteins * 4 + fats * 9 + carbs * 4)


3. Использовать logging вместо print для отладки
Плохо:

print("Ошибка: введено неверное значение калорий.")

Хорошо:

import logging
logging.basicConfig(level=logging.ERROR)
logging.error("Ошибка: введено неверное значение калорий.")




---

Чек-лист перед код-ревью

[ ] Код проходит проверку flake8 (или black).

[ ] Названия переменных и функций осмысленные и соответствуют PEP8.

[ ] Функции не превышают 20 строк и выполняют только одну задачу.

[ ] В коде нет "магических чисел" — используются константы.

[ ] В коде есть docstring-комментарии для функций и модулей.

[ ] Используются f-строки вместо + и .format().

[ ] Логирование (logging) используется для отладки вместо print().

[ ] Все переменные и параметры имеют аннотации типов.


Такой документ поможет поддерживать чистоту и читаемость кода в проекте.
